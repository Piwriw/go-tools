// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/piwriw/gorm/model"
	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newEmp(db *gorm.DB) emp {
	_emp := emp{}

	_emp.empDo.UseDB(db)
	_emp.empDo.UseModel(&model.Emp{})

	tableName := _emp.empDo.TableName()
	_emp.ALL = field.NewField(tableName, "*")
	_emp.ID = field.NewInt32(tableName, "id")
	_emp.Name = field.NewString(tableName, "name")
	_emp.Age = field.NewInt32(tableName, "age")
	_emp.Addresss = field.NewString(tableName, "addresss")

	_emp.fillFieldMap()

	return _emp
}

type emp struct {
	empDo empDo

	ALL      field.Field
	ID       field.Int32
	Name     field.String
	Age      field.Int32
	Addresss field.String

	fieldMap map[string]field.Expr
}

func (e emp) Table(newTableName string) *emp {
	e.empDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e emp) As(alias string) *emp {
	e.empDo.DO = *(e.empDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *emp) updateTableName(table string) *emp {
	e.ALL = field.NewField(table, "*")
	e.ID = field.NewInt32(table, "id")
	e.Name = field.NewString(table, "name")
	e.Age = field.NewInt32(table, "age")
	e.Addresss = field.NewString(table, "addresss")

	e.fillFieldMap()

	return e
}

func (e *emp) WithContext(ctx context.Context) *empDo { return e.empDo.WithContext(ctx) }

func (e emp) TableName() string { return e.empDo.TableName() }

func (e emp) Alias() string { return e.empDo.Alias() }

func (e *emp) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *emp) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 4)
	e.fieldMap["id"] = e.ID
	e.fieldMap["name"] = e.Name
	e.fieldMap["age"] = e.Age
	e.fieldMap["addresss"] = e.Addresss
}

func (e emp) clone(db *gorm.DB) emp {
	e.empDo.ReplaceDB(db)
	return e
}

type empDo struct{ gen.DO }

// SELECT * FROM @@table WHERE id=@id
func (e empDo) GetByID(id int) (result *model.Emp, err error) {
	params := make(map[string]interface{}, 0)

	var generateSQL strings.Builder
	params["id"] = id
	generateSQL.WriteString("SELECT * FROM emp WHERE id=@id ")

	var executeSQL *gorm.DB
	if len(params) > 0 {
		executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params).Take(&result)
	} else {
		executeSQL = e.UnderlyingDB().Raw(generateSQL.String()).Take(&result)
	}
	err = executeSQL.Error
	return
}

// SELECT * FROM @@table WHERE name=@name
func (e empDo) GetByName(name string) (result *model.Emp, err error) {
	params := make(map[string]interface{}, 0)

	var generateSQL strings.Builder
	params["name"] = name
	generateSQL.WriteString("SELECT * FROM emp WHERE name=@name ")

	var executeSQL *gorm.DB
	if len(params) > 0 {
		executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params).Take(&result)
	} else {
		executeSQL = e.UnderlyingDB().Raw(generateSQL.String()).Take(&result)
	}
	err = executeSQL.Error
	return
}

// SELECT * FROM @@table WHERE age<@age
func (e empDo) GetEmps(age int) (result []*model.Emp, err error) {
	params := make(map[string]interface{}, 0)

	var generateSQL strings.Builder
	params["age"] = age
	generateSQL.WriteString("SELECT * FROM emp WHERE age<@age ")

	var executeSQL *gorm.DB
	if len(params) > 0 {
		executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params).Find(&result)
	} else {
		executeSQL = e.UnderlyingDB().Raw(generateSQL.String()).Find(&result)
	}
	err = executeSQL.Error
	return
}

func (e empDo) Debug() *empDo {
	return e.withDO(e.DO.Debug())
}

func (e empDo) WithContext(ctx context.Context) *empDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e empDo) Clauses(conds ...clause.Expression) *empDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e empDo) Returning(value interface{}, columns ...string) *empDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e empDo) Not(conds ...gen.Condition) *empDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e empDo) Or(conds ...gen.Condition) *empDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e empDo) Select(conds ...field.Expr) *empDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e empDo) Where(conds ...gen.Condition) *empDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e empDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *empDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e empDo) Order(conds ...field.Expr) *empDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e empDo) Distinct(cols ...field.Expr) *empDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e empDo) Omit(cols ...field.Expr) *empDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e empDo) Join(table schema.Tabler, on ...field.Expr) *empDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e empDo) LeftJoin(table schema.Tabler, on ...field.Expr) *empDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e empDo) RightJoin(table schema.Tabler, on ...field.Expr) *empDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e empDo) Group(cols ...field.Expr) *empDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e empDo) Having(conds ...gen.Condition) *empDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e empDo) Limit(limit int) *empDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e empDo) Offset(offset int) *empDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e empDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *empDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e empDo) Unscoped() *empDo {
	return e.withDO(e.DO.Unscoped())
}

func (e empDo) Create(values ...*model.Emp) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e empDo) CreateInBatches(values []*model.Emp, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e empDo) Save(values ...*model.Emp) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e empDo) First() (*model.Emp, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Emp), nil
	}
}

func (e empDo) Take() (*model.Emp, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Emp), nil
	}
}

func (e empDo) Last() (*model.Emp, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Emp), nil
	}
}

func (e empDo) Find() ([]*model.Emp, error) {
	result, err := e.DO.Find()
	return result.([]*model.Emp), err
}

func (e empDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Emp, err error) {
	buf := make([]*model.Emp, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e empDo) FindInBatches(result *[]*model.Emp, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e empDo) Attrs(attrs ...field.AssignExpr) *empDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e empDo) Assign(attrs ...field.AssignExpr) *empDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e empDo) Joins(fields ...field.RelationField) *empDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e empDo) Preload(fields ...field.RelationField) *empDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e empDo) FirstOrInit() (*model.Emp, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Emp), nil
	}
}

func (e empDo) FirstOrCreate() (*model.Emp, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Emp), nil
	}
}

func (e empDo) FindByPage(offset int, limit int) (result []*model.Emp, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e empDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e *empDo) withDO(do gen.Dao) *empDo {
	e.DO = *do.(*gen.DO)
	return e
}
