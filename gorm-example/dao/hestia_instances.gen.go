// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/piwriw/gorm/model"
)

func newHestiaInstance(db *gorm.DB, opts ...gen.DOOption) hestiaInstance {
	_hestiaInstance := hestiaInstance{}

	_hestiaInstance.hestiaInstanceDo.UseDB(db, opts...)
	_hestiaInstance.hestiaInstanceDo.UseModel(&model.HestiaInstance{})

	tableName := _hestiaInstance.hestiaInstanceDo.TableName()
	_hestiaInstance.ALL = field.NewAsterisk(tableName)
	_hestiaInstance.ID = field.NewInt64(tableName, "id")
	_hestiaInstance.Category = field.NewString(tableName, "category")
	_hestiaInstance.Usefor = field.NewString(tableName, "usefor")
	_hestiaInstance.Datum = field.NewString(tableName, "data")
	_hestiaInstance.Status = field.NewBool(tableName, "status")
	_hestiaInstance.CreatedAt = field.NewTime(tableName, "created_at")
	_hestiaInstance.CreatedBy = field.NewString(tableName, "created_by")
	_hestiaInstance.UpdatedAt = field.NewTime(tableName, "updated_at")
	_hestiaInstance.UpdatedBy = field.NewString(tableName, "updated_by")
	_hestiaInstance.DeletedBy = field.NewString(tableName, "deleted_by")
	_hestiaInstance.RequestID = field.NewString(tableName, "request_id")
	_hestiaInstance.Account = field.NewString(tableName, "account")
	_hestiaInstance.DisabledBy = field.NewString(tableName, "disabled_by")
	_hestiaInstance.MonitorMethod = field.NewString(tableName, "monitor_method")
	_hestiaInstance.MonitorAccount = field.NewString(tableName, "monitor_account")
	_hestiaInstance.MonitorStatus = field.NewString(tableName, "monitor_status")
	_hestiaInstance.MonitorError = field.NewString(tableName, "monitor_error")
	_hestiaInstance.MonitorScrape = field.NewTime(tableName, "monitor_scrape")
	_hestiaInstance.Source = field.NewInt32(tableName, "source")
	_hestiaInstance.PoolMaxActive = field.NewInt32(tableName, "pool_max_active")
	_hestiaInstance.QueryTimeout = field.NewInt32(tableName, "query_timeout")
	_hestiaInstance.Network = field.NewString(tableName, "network")

	_hestiaInstance.fillFieldMap()

	return _hestiaInstance
}

type hestiaInstance struct {
	hestiaInstanceDo hestiaInstanceDo

	ALL            field.Asterisk
	ID             field.Int64
	Category       field.String
	Usefor         field.String
	Datum          field.String
	Status         field.Bool
	CreatedAt      field.Time
	CreatedBy      field.String
	UpdatedAt      field.Time
	UpdatedBy      field.String
	DeletedBy      field.String
	RequestID      field.String
	Account        field.String
	DisabledBy     field.String
	MonitorMethod  field.String
	MonitorAccount field.String
	MonitorStatus  field.String
	MonitorError   field.String
	MonitorScrape  field.Time
	Source         field.Int32
	PoolMaxActive  field.Int32
	QueryTimeout   field.Int32
	Network        field.String

	fieldMap map[string]field.Expr
}

func (h hestiaInstance) Table(newTableName string) *hestiaInstance {
	h.hestiaInstanceDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hestiaInstance) As(alias string) *hestiaInstance {
	h.hestiaInstanceDo.DO = *(h.hestiaInstanceDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hestiaInstance) updateTableName(table string) *hestiaInstance {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt64(table, "id")
	h.Category = field.NewString(table, "category")
	h.Usefor = field.NewString(table, "usefor")
	h.Datum = field.NewString(table, "data")
	h.Status = field.NewBool(table, "status")
	h.CreatedAt = field.NewTime(table, "created_at")
	h.CreatedBy = field.NewString(table, "created_by")
	h.UpdatedAt = field.NewTime(table, "updated_at")
	h.UpdatedBy = field.NewString(table, "updated_by")
	h.DeletedBy = field.NewString(table, "deleted_by")
	h.RequestID = field.NewString(table, "request_id")
	h.Account = field.NewString(table, "account")
	h.DisabledBy = field.NewString(table, "disabled_by")
	h.MonitorMethod = field.NewString(table, "monitor_method")
	h.MonitorAccount = field.NewString(table, "monitor_account")
	h.MonitorStatus = field.NewString(table, "monitor_status")
	h.MonitorError = field.NewString(table, "monitor_error")
	h.MonitorScrape = field.NewTime(table, "monitor_scrape")
	h.Source = field.NewInt32(table, "source")
	h.PoolMaxActive = field.NewInt32(table, "pool_max_active")
	h.QueryTimeout = field.NewInt32(table, "query_timeout")
	h.Network = field.NewString(table, "network")

	h.fillFieldMap()

	return h
}

func (h *hestiaInstance) WithContext(ctx context.Context) *hestiaInstanceDo {
	return h.hestiaInstanceDo.WithContext(ctx)
}

func (h hestiaInstance) TableName() string { return h.hestiaInstanceDo.TableName() }

func (h hestiaInstance) Alias() string { return h.hestiaInstanceDo.Alias() }

func (h hestiaInstance) Columns(cols ...field.Expr) gen.Columns {
	return h.hestiaInstanceDo.Columns(cols...)
}

func (h *hestiaInstance) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hestiaInstance) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 22)
	h.fieldMap["id"] = h.ID
	h.fieldMap["category"] = h.Category
	h.fieldMap["usefor"] = h.Usefor
	h.fieldMap["data"] = h.Datum
	h.fieldMap["status"] = h.Status
	h.fieldMap["created_at"] = h.CreatedAt
	h.fieldMap["created_by"] = h.CreatedBy
	h.fieldMap["updated_at"] = h.UpdatedAt
	h.fieldMap["updated_by"] = h.UpdatedBy
	h.fieldMap["deleted_by"] = h.DeletedBy
	h.fieldMap["request_id"] = h.RequestID
	h.fieldMap["account"] = h.Account
	h.fieldMap["disabled_by"] = h.DisabledBy
	h.fieldMap["monitor_method"] = h.MonitorMethod
	h.fieldMap["monitor_account"] = h.MonitorAccount
	h.fieldMap["monitor_status"] = h.MonitorStatus
	h.fieldMap["monitor_error"] = h.MonitorError
	h.fieldMap["monitor_scrape"] = h.MonitorScrape
	h.fieldMap["source"] = h.Source
	h.fieldMap["pool_max_active"] = h.PoolMaxActive
	h.fieldMap["query_timeout"] = h.QueryTimeout
	h.fieldMap["network"] = h.Network
}

func (h hestiaInstance) clone(db *gorm.DB) hestiaInstance {
	h.hestiaInstanceDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hestiaInstance) replaceDB(db *gorm.DB) hestiaInstance {
	h.hestiaInstanceDo.ReplaceDB(db)
	return h
}

type hestiaInstanceDo struct{ gen.DO }

// SELECT * FROM @@table WHERE employee_id=@id
func (h hestiaInstanceDo) GetByID(id int) (result model.HestiaInstance, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM hestia_instances WHERE employee_id=? ")

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE first_name=@name
func (h hestiaInstanceDo) GetByName(name string) (result model.HestiaInstance, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM hestia_instances WHERE first_name=? ")

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE salary<@salary
func (h hestiaInstanceDo) GetEmps(salary int) (result []model.HestiaInstance, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, salary)
	generateSQL.WriteString("SELECT * FROM hestia_instances WHERE salary<? ")

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT e.employee_id, e.first_name, e.last_name, e.department_id, s.salary_amount
// FROM @@table e
// LEFT JOIN Salary s ON e.employee_id = s.employee_id;
func (h hestiaInstanceDo) GetSalary() (result []map[string]interface{}, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT e.employee_id, e.first_name, e.last_name, e.department_id, s.salary_amount FROM hestia_instances e LEFT JOIN Salary s ON e.employee_id = s.employee_id; ")

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM Employees WHERE first_name REGEXP '^J'
func (h hestiaInstanceDo) FitEmps() (result []model.HestiaInstance, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM Employees WHERE first_name REGEXP '^J' ")

	var executeSQL *gorm.DB
	executeSQL = h.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (h hestiaInstanceDo) Debug() *hestiaInstanceDo {
	return h.withDO(h.DO.Debug())
}

func (h hestiaInstanceDo) WithContext(ctx context.Context) *hestiaInstanceDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hestiaInstanceDo) ReadDB() *hestiaInstanceDo {
	return h.Clauses(dbresolver.Read)
}

func (h hestiaInstanceDo) WriteDB() *hestiaInstanceDo {
	return h.Clauses(dbresolver.Write)
}

func (h hestiaInstanceDo) Session(config *gorm.Session) *hestiaInstanceDo {
	return h.withDO(h.DO.Session(config))
}

func (h hestiaInstanceDo) Clauses(conds ...clause.Expression) *hestiaInstanceDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hestiaInstanceDo) Returning(value interface{}, columns ...string) *hestiaInstanceDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hestiaInstanceDo) Not(conds ...gen.Condition) *hestiaInstanceDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hestiaInstanceDo) Or(conds ...gen.Condition) *hestiaInstanceDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hestiaInstanceDo) Select(conds ...field.Expr) *hestiaInstanceDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hestiaInstanceDo) Where(conds ...gen.Condition) *hestiaInstanceDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hestiaInstanceDo) Order(conds ...field.Expr) *hestiaInstanceDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hestiaInstanceDo) Distinct(cols ...field.Expr) *hestiaInstanceDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hestiaInstanceDo) Omit(cols ...field.Expr) *hestiaInstanceDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hestiaInstanceDo) Join(table schema.Tabler, on ...field.Expr) *hestiaInstanceDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hestiaInstanceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *hestiaInstanceDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hestiaInstanceDo) RightJoin(table schema.Tabler, on ...field.Expr) *hestiaInstanceDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hestiaInstanceDo) Group(cols ...field.Expr) *hestiaInstanceDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hestiaInstanceDo) Having(conds ...gen.Condition) *hestiaInstanceDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hestiaInstanceDo) Limit(limit int) *hestiaInstanceDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hestiaInstanceDo) Offset(offset int) *hestiaInstanceDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hestiaInstanceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *hestiaInstanceDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hestiaInstanceDo) Unscoped() *hestiaInstanceDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hestiaInstanceDo) Create(values ...*model.HestiaInstance) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hestiaInstanceDo) CreateInBatches(values []*model.HestiaInstance, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hestiaInstanceDo) Save(values ...*model.HestiaInstance) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hestiaInstanceDo) First() (*model.HestiaInstance, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HestiaInstance), nil
	}
}

func (h hestiaInstanceDo) Take() (*model.HestiaInstance, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HestiaInstance), nil
	}
}

func (h hestiaInstanceDo) Last() (*model.HestiaInstance, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HestiaInstance), nil
	}
}

func (h hestiaInstanceDo) Find() ([]*model.HestiaInstance, error) {
	result, err := h.DO.Find()
	return result.([]*model.HestiaInstance), err
}

func (h hestiaInstanceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HestiaInstance, err error) {
	buf := make([]*model.HestiaInstance, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hestiaInstanceDo) FindInBatches(result *[]*model.HestiaInstance, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hestiaInstanceDo) Attrs(attrs ...field.AssignExpr) *hestiaInstanceDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hestiaInstanceDo) Assign(attrs ...field.AssignExpr) *hestiaInstanceDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hestiaInstanceDo) Joins(fields ...field.RelationField) *hestiaInstanceDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hestiaInstanceDo) Preload(fields ...field.RelationField) *hestiaInstanceDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hestiaInstanceDo) FirstOrInit() (*model.HestiaInstance, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HestiaInstance), nil
	}
}

func (h hestiaInstanceDo) FirstOrCreate() (*model.HestiaInstance, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HestiaInstance), nil
	}
}

func (h hestiaInstanceDo) FindByPage(offset int, limit int) (result []*model.HestiaInstance, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hestiaInstanceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hestiaInstanceDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hestiaInstanceDo) Delete(models ...*model.HestiaInstance) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hestiaInstanceDo) withDO(do gen.Dao) *hestiaInstanceDo {
	h.DO = *do.(*gen.DO)
	return h
}
